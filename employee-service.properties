

# Database connection URL - Specifies the PostgreSQL database location with the database name
spring.datasource.url=jdbc:postgresql://localhost:5432/employee_db

# Database credentials - Username and password for PostgreSQL
spring.datasource.username=${DB_USERNAME}
spring.datasource.password=${DB_PASSWORD}

# Hibernate Dialect - Tells Hibernate to use PostgreSQL-specific SQL optimizations
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

# Hibernate DDL auto configuration
# update - Updates the schema automatically
# create - Creates the schema every time (useful for testing, but risky for production)
# create-drop - Creates schema and drops it when the session ends
# validate - Validates schema but doesn't make changes
spring.jpa.hibernate.ddl-auto=update


# This is for customizing the Spring Security properties like username
# Commented these credentials because we are using RBAC for authentication and this is defined in the SecurityConfig.java file
#spring.security.user.name=bharath
#spring.security.user.password=B@5698
#spring.security.user.roles=ADMIN


# Show SQL - Enables logging of SQL queries executed by Hibernate
spring.jpa.show-sql=true

# Format SQL - Makes SQL logs more readable
spring.jpa.properties.hibernate.format_sql=true

# Change the default port
server.port=8081

#Add an application name for this service so that eureka server will use this name from now onwards
#application name is not needed because this acts as a config client and pulls this data from git using the file name 
#spring.application.name=EMPLOYEE-SERVICE

#To register this service as Eureka-Client
eureka.instance.client.serverUrl.defaultZone=http://localhost:8761/eureka/

spring.boot.message=Hello, Employee Service using Spring Cloud Bus Demo


